<?xml version="1.0" encoding="UTF-8"?>
<x:description 
  xmlns:x="http://www.jenitennison.com/xslt/xspec" 
  xmlns:els="http://www.lefebvre-sarrut.eu/ns/els"
  stylesheet="../../main/xsl/els-common_xml.xsl"
  xslt-version="3.0">

  <x:scenario label="els:get-xpath">
    <x:call function="els:get-xpath">
      <x:param name="node" select="//d">
        <doc xmlns="">
          <a>
            <b/>
            <b>
              <c>text <d/></c>
            </b>
          </a>
        </doc>
      </x:param>
    </x:call>
    <x:expect label="Xpath to d" select="'/doc/a[1]/b[2]/c[1]/d[1]'"/>
  </x:scenario>

  <x:scenario label="els:get-xpath">
    <x:call function="els:get-xpath">
      <x:param name="node" select="//d">
        <doc xmlns="">
          <a>
            <b/>
            <b>
              <c>text <d/></c>
            </b>
          </a>
        </doc>
      </x:param>
      <x:param name="nsprefix" select="'ns1'"/>
      <x:param name="display_position" select="false()"/>
    </x:call>
    <x:expect label="Xpath to d" select="'/ns1:doc/ns1:a/ns1:b/ns1:c/ns1:d'"/>
  </x:scenario>

  <x:scenario label="PSEUDO ATTRIBUTES">

    <x:scenario label="els:pseudoAttributes2xml($str, $attQuot)">
      <!--DEBUG : cf. cf. http://markmail.org/thread/ez25ul5izykrbguv-->
      <x:call function="els:pseudoAttributes2xml">
        <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
        <x:param name="attQuot">"</x:param>
      </x:call>
      <x:expect label="2 pseudo-attributes catched" select="*/@*">
        <result version="1.0" encoding="UTF-8"/>
      </x:expect>
    </x:scenario>

    <x:scenario label="els:pseudoAttribute2xml">
      <x:call function="els:pseudoAttribute2xml">
        <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
        <x:param name="attName" select="'version'"/>
      </x:call>
      <x:expect label="1 pseudo-attributes catched" select="*/@*">
        <result version="1.0"/>
      </x:expect>
    </x:scenario>

    <x:scenario label="els:getPseudoAttributeValue">
      <x:call function="els:getPseudoAttributeValue">
        <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
        <x:param name="attName" select="'version'"/>
      </x:call>
      <x:expect label="1.0" select="'1.0'"/>
    </x:scenario>

    <x:scenario label="els:hasPseudoAttribute">
      <x:call function="els:hasPseudoAttribute">
        <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
        <x:param name="attName" select="'version'"/>
      </x:call>
      <x:expect label="true" select="true()"/>
    </x:scenario>

    <x:scenario label="els:hasPseudoAttribute">
      <x:call function="els:hasPseudoAttribute">
        <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
        <x:param name="attName" select="'foo'"/>
      </x:call>
      <x:expect label="false" select="false()"/>
    </x:scenario>

  </x:scenario>

  <x:scenario label="els:hasAncestor">
    <x:call function="els:hasAncestor">
      <x:param name="node" select="//node">
        <doc xmlns="">
          <ancestor>
            <b/>
            <b>
              <node>text</node>
            </b>
          </ancestor>
        </doc>
      </x:param>
      <x:param name="ancestor" select="$node/ancestor::ancestor[1]"/>
    </x:call>
    <x:expect label="$node hasAncestor $ancestor" select="true()"/>
  </x:scenario>

  <x:scenario label="els:hasStyle">
    <x:call function="els:hasStyle">
      <x:param name="e">
        <foo style="color:red;font-size: 1em; display:inline-block"/>
      </x:param>
      <x:param name="style" select="'font-size: 1em'"/>
    </x:call>
    <x:expect label="true" select="true()"/>
  </x:scenario>

  <x:scenario label="els:hasClass">
    <x:call function="els:hasClass">
      <x:param name="e">
        <foo class="one bar any"/>
      </x:param>
      <x:param name="class" select="'bar'"/>
    </x:call>
    <x:expect label="true" select="true()"/>
  </x:scenario>
  
  <x:scenario label="els:hasClass">
    <x:call function="els:hasClass">
      <x:param name="e">
        <foo class="one barjo any"/>
      </x:param>
      <x:param name="class" select="'bar'"/>
    </x:call>
    <x:expect label="false" select="false()"/>
  </x:scenario>
  
  <x:scenario label="els:hasClassMatchingRegex">
    <x:call function="els:hasClassMatchingRegex">
      <x:param name="e">
        <foo class="foo heading-12 bar"/>
      </x:param>
      <x:param name="class.regex" select="'heading-\d+'"/>
    </x:call>
    <x:expect label="true" select="true()"/>
  </x:scenario>

  <x:scenario label="els:addClass">
    <x:call function="els:addClass">
      <x:param name="e">
        <foo class="foo heading-12 bar"/>
      </x:param>
      <x:param name="class" select="'addme'"/>
    </x:call>
    <x:expect label="OK" select="*/@class">
      <foo class="foo heading-12 bar addme"/>
    </x:expect>
  </x:scenario>

  <x:scenario label="els:removeOneClass">
    <x:call function="els:removeOneClass">
      <x:param name="e">
        <element class="try1 try2 try3"/>          
      </x:param>
    </x:call>
    <x:scenario label="try1">
      <x:call>
        <x:param name="classToRemove" as="xs:string" select="'try1'"/>
      </x:call>
      <x:expect label="OK" select="/*/@class">
        <temp class="try2 try3"/>
      </x:expect>        
    </x:scenario>
    <x:scenario label="try2">
      <x:call>
        <x:param name="classToRemove" as="xs:string" select="'try2'"/>
      </x:call>
      <x:expect label="OK" select="/*/@class">
        <temp class="try1 try3"/>
      </x:expect>        
    </x:scenario>
    <x:scenario label="try3">
      <x:call>
        <x:param name="classToRemove" as="xs:string" select="'try3'"/>
      </x:call>
      <x:expect label="OK" select="/*/@class">
        <temp class="try1 try2"/>
      </x:expect>        
    </x:scenario>      
  </x:scenario>

<!--    <x:scenario label="meta:get-word-index-lower-than-limit" focus="yes">
    <x:call function="meta:get-word-index-lower-than-limit">
      <x:param name="string" as="xs:string" select="'word1 word2 word3'"/>
    </x:call>
    <x:scenario label="$limit = 5">
      <x:call>
        <x:param name="limit" as="xs:integer" select="5"/>
      </x:call>
      <x:expect label="test" select="1"/>
    </x:scenario>
    <x:scenario label="$limit = 8">
      <x:call>
        <x:param name="limit" as="xs:integer" select="11"/>
      </x:call>
      <x:expect label="test" select="2"/>
    </x:scenario>
    <x:scenario label="$limit = 17">
      <x:call>
        <x:param name="limit" as="xs:integer" select="17"/>
      </x:call>
      <x:expect label="test" select="3"/>
    </x:scenario>
  </x:scenario>-->
  

  <x:scenario label="els:displayNode">
    <x:call function="els:displayNode"/>
    <x:scenario label="element">
      <x:call>
        <x:param name="node">
          <test foo="bar" bar="foo"/>
        </x:param>
      </x:call>
      <x:expect label="Test" select="string(*/text())">
        <string>element():test_@foo="bar"_@bar="foo"</string>
      </x:expect>
    </x:scenario>
    <x:scenario label="text()">
      <x:call>
        <x:param name="node" select="/*/text()">
          <test>foobar</test>
        </x:param>
      </x:call>
      <x:expect label="Test" select="string(*/text())">
        <string>text() foobar</string>
      </x:expect>
    </x:scenario>
    <x:scenario label="comment()">
      <x:call>
        <x:param name="node" select="/*/comment()">
          <test><!--foobar--></test>
        </x:param>
      </x:call>
      <x:expect label="Test" select="string(*/text())">
        <string>comment() foobar</string>
      </x:expect>
    </x:scenario>
    <x:scenario label="pi()">
      <x:call>
        <x:param name="node" select="/*/processing-instruction()">
          <test><?pi foo="bar"?></test>
        </x:param>
      </x:call>
      <x:expect label="Test" select="string(*/text())">
        <string>processing-instruction() foo="bar"</string>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="els:evaluate-xpath">
    <x:call function="els:evaluate-xpath">
      <x:param name="xpath" select="'//niveau'"/>
      <x:param name="e">
        <infoCommentaire>
          <titre>test</titre>
          <commentaire id="c1">
            <niveau id="n1">
              <titre>Titre 1</titre>
              <niveau id="n1.1">
                <titre>Titre 1.1</titre>
              </niveau>
            </niveau>
          </commentaire>
        </infoCommentaire>
      </x:param>
    </x:call>
    <x:expect label="//niveau">
      <niveau id="n1">
        <titre>Titre 1</titre>
        <niveau id="n1.1">
          <titre>Titre 1.1</titre>
        </niveau>
      </niveau>
      <niveau id="n1.1">
        <titre>Titre 1.1</titre>
      </niveau>
    </x:expect>
  </x:scenario>

  <x:scenario label="els:serialize">
    <x:call function="els:serialize">
      <x:param name="nodes">
        <test foo="bar">text<sup>sup</sup></test>
      </x:param>
    </x:call>
    <x:expect label="Node serialized as string" select="string(*/text())">
      <string>&lt;test foo="bar">text&lt;sup>sup&lt;/sup>&lt;/test></string>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="els:wrap-elements-adjacent-by-names">
    <x:call function="els:wrap-elements-adjacent-by-names">
      <x:param name="context">
        <context xmlns:p="prefix">
          <a foo="bar">lorem ipsum</a>
          <a>lorem ipsum</a>
          <b foo="bar">lorem ipsum</b>
          <!-- comment -->
          <p:b>lorem ipsum</p:b>
          <c foo="bar">lorem ipsum</c>
          <c>lorem ipsum</c>
          <?pi?>
          <p:a>lorem ipsum</p:a>
          <b foo="bar">lorem ipsum</b>
          <c>lorem ipsum</c>
          <b foo="bar">lorem ipsum</b>
          text
        </context>
      </x:param>
      <x:param name="adjacent.names" select="('a', 'b')"/>
      <x:param name="wrapper">
        <WRAPPER adjacent="a or b"/>
      </x:param>
      <x:param name="keep-context" select="true()"/>
    </x:call>
    <x:expect label="result">
      <context xmlns:p="prefix">
        <WRAPPER adjacent="a or b">
          <a foo="bar">lorem ipsum</a>
          <a>lorem ipsum</a>
          <b foo="bar">lorem ipsum</b>
        </WRAPPER>
        <p:b>lorem ipsum</p:b>
        <c foo="bar">lorem ipsum</c>
        <c>lorem ipsum</c>
        <p:a>lorem ipsum</p:a>
        <WRAPPER adjacent="a or b">
          <b foo="bar">lorem ipsum</b>
        </WRAPPER>
        <c>lorem ipsum</c>
        <WRAPPER adjacent="a or b">
          <b foo="bar">lorem ipsum</b>
        </WRAPPER>
      </context>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="els:wrap-elements-starting-with-names">
    <x:call function="els:wrap-elements-starting-with-names">
      <x:param name="context">
        <context xmlns:p="prefix">
          <a foo="bar">lorem ipsum</a>
          <a>lorem ipsum</a>
          <b foo="bar">lorem ipsum</b>
          <!-- comment -->
          <p:b>lorem ipsum</p:b>
          <c foo="bar">lorem ipsum</c>
          <c>lorem ipsum</c>
          <?pi?>
          <p:a>lorem ipsum</p:a>
          <b foo="bar">lorem ipsum</b>
          <c>lorem ipsum</c>
          <b foo="bar">lorem ipsum</b>
          text
        </context>
      </x:param>
      <x:param name="starts-names" select="('a', 'c')"/>
      <x:param name="wrapper">
        <WRAPPER starts="a or c"/>
      </x:param>
      <x:param name="keep-context" select="true()"/>
    </x:call>
    <x:expect label="result">
      <context xmlns:p="prefix">
        <WRAPPER starts="a or c">
          <a foo="bar">lorem ipsum</a>
        </WRAPPER>
        <WRAPPER starts="a or c">
          <a>lorem ipsum</a>
          <b foo="bar">lorem ipsum</b>
          <!-- comment -->
          <p:b>lorem ipsum</p:b>
        </WRAPPER>
        <WRAPPER starts="a or c">
          <c foo="bar">lorem ipsum</c>
        </WRAPPER>
        <WRAPPER starts="a or c">
          <c>lorem ipsum</c>
          <?pi ?>
          <p:a>lorem ipsum</p:a>
          <b foo="bar">lorem ipsum</b>
        </WRAPPER>
        <WRAPPER starts="a or c">
          <c>lorem ipsum</c>
          <b foo="bar">lorem ipsum</b>
          text
        </WRAPPER>
      </context>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="els:wrap-elements-adjacent" pending="els:wrap-elements-adjacent-by-names is already an implementation of this function">
    <x:call function="els:wrap-elements-adjacent"/>
  </x:scenario>
  
  <x:scenario label="els:wrap-elements-starting-with" pending="els:wrap-elements-starting-with-names is already an implementation of this function">
    <x:call function="els:wrap-elements-starting-with"/>
  </x:scenario>
  
</x:description>