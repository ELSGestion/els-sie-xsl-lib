<?xml version="1.0" encoding="UTF-8"?>
<x:description 
  xmlns:x="http://www.jenitennison.com/xslt/xspec" 
  xmlns:els="http://www.lefebvre-sarrut.eu/ns/els"
  stylesheet="../../main/xsl/els-common_strings.xsl"
  xslt-version="3.0">
  
  <x:scenario label="els:string-join - normal use">
    <x:call function="els:string-join">
      <x:param name="seq" select="('text1', 'text2', 'text3', 'text4')"/>
      <x:param name="sep" select="', '"/>
      <x:param name="lastSep" select="' and '"/>
    </x:call>
    <x:expect label="els:string-join" select="'text1, text2, text3 and text4'"/>
  </x:scenario>
  
  <x:scenario label="els:string-join - empty use">
    <x:call function="els:string-join">
      <x:param name="seq" select="''"/>
      <x:param name="sep" select="', '"/>
      <x:param name="lastSep" select="' and '"/>
    </x:call>
    <x:expect label="els:string-join" select="''"/>
  </x:scenario>
  
  <x:scenario label="els:string-join - one item">
    <x:call function="els:string-join">
      <x:param name="seq" select="'text1'"/>
      <x:param name="sep" select="', '"/>
      <x:param name="lastSep" select="' and '"/>
    </x:call>
    <x:expect label="els:string-join" select="'text1'"/>
  </x:scenario>
  
  <x:scenario label="els:els:replace-multiple()">
    <x:call function="els:replace-multiple">
      <x:param name="string" select="'Text test_12 xxx text/ZZZ'"/>
      <x:param name="replace.list" as="element(els:replace-list)">
        <replace-list xmlns="http://www.lefebvre-sarrut.eu/ns/els">
          <replace>
            <pattern>test_(\d+)</pattern>
            <replacement>Test n°$1</replacement>
          </replace>
          <replace flags="x">
            <pattern>(x) (x) (x)</pattern>
            <replacement>Y$2Y</replacement>
          </replace>
          <replace flags="xi">
            <pattern>(zzz)</pattern>
            <replacement>A</replacement>
          </replace>
        </replace-list>
      </x:param>
    </x:call>
    <x:expect label="String with replacements" select="'Text Test n°12 YxY text/A'"/>
  </x:scenario>

  <x:scenario label="els:els:replace-multiple() => 1">
    <x:call function="els:replace-multiple">
      <x:param name="string" select="'MAC 2018 et 2016 , 2015 + 2018'"/>
      <x:param name="replace.list" as="element(els:replace-list)">
        <replace-list xmlns="http://www.lefebvre-sarrut.eu/ns/els">
          <replace>
            <pattern>(\d+)(\s*et\s*|\s*,\s*|\s*\+\s*)</pattern>
            <replacement>$1#SEP#</replacement>
          </replace>
        </replace-list>
      </x:param>
    </x:call>
    <x:expect label="String with replacements" select="'MAC 2018#SEP#2016#SEP#2015#SEP#2018'"/>
  </x:scenario>
  
  <x:scenario label="els:normalize-no-diacritic">
    <x:call function="els:normalize-no-diacritic">
      <x:param name="string" select="'abcçdéêèàœ'"/>
    </x:call>
    <x:expect label="abccdeeeeœ" select="'abccdeeeaœ'"/>
  </x:scenario>
  
  <x:scenario label="els:strip-accent">
    <x:call function="els:strip-accent">
      <x:param name="string" select="'abcçdéêèàœ'"/>
    </x:call>
    <x:expect label="abccdeeeeœ" select="'abccdeeeaœ'"/>
  </x:scenario>
  
  <x:scenario label="els:crlf">
    <x:call function="els:crlf">
      <x:param name="n" select="3"/>
    </x:call>
    <x:expect label="3 carriage return" select="('&#10;', '&#10;', '&#10;')"/>
  </x:scenario>
  
  <x:scenario label="els:crlf">
    <x:call function="els:crlf"/> 
    <x:expect label="1 carriage return" select="'&#10;'"/>
  </x:scenario>
  
  <x:scenario label="els:displaySubstring">
    <x:call function="els:displaySubstring">
      <x:param name="s" select="'This is a specific text to be displayed'"/>
    </x:call>
    <x:scenario label="[...] before">
      <x:call>
        <x:param name="startingLoc" select="6"/>
        <x:param name="length" select="50"/>
      </x:call>
      <x:expect label="true" select="'[...]&#160;is a specific text to be displayed'"/>
    </x:scenario>
    <x:scenario label="[...] after">
      <x:call>
        <x:param name="startingLoc" select="1"/>
        <x:param name="length" select="10"/>
      </x:call>
      <x:expect label="true" select="'This is a &#160;[...]'"/>
    </x:scenario>
    <x:scenario label="[...] before and after">
      <x:call>
        <x:param name="startingLoc" select="11"/>
        <x:param name="length" select="13"/>
      </x:call>
      <x:expect label="true" select="'[...]&#160;specific text&#160;[...]'"/>
    </x:scenario>
    <x:scenario label="empty length">
      <x:call>
        <x:param name="startingLoc" select="11"/>
        <x:param name="length" select="()"/>
      </x:call>
      <x:expect label="true" select="'[...]&#160;specific text to be displayed'"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="els:getFirstChar">
    <x:call function="els:getFirstChar">
      <x:param name="s" select="'foobar'"/>
    </x:call>
    <x:expect label="f" select="'f'"/>
  </x:scenario>
  
  <x:scenario label="els:getFirstChar">
    <x:call function="els:getFirstChar">
      <x:param name="s" select="'foobar'"/>
      <x:param name="n" select="3"/>
    </x:call>
    <x:expect label="foo" select="'foo'"/>
  </x:scenario>
  
  <x:scenario label="els:getStringButFirstChar">
    <x:call function="els:getStringButFirstChar">
      <x:param name="s" select="'foobar'"/>
    </x:call>
    <x:expect label="oobar" select="'oobar'"/>
  </x:scenario>
  
  <x:scenario label="els:capFirst_lowercase">
    <x:call function="els:capFirst_lowercase">
      <x:param name="s" select="'fooBaR'"/>
    </x:call>
    <x:expect label="Foobar" select="'Foobar'"/>
  </x:scenario>
  
  <x:scenario label="els:capFirst">
    <x:call function="els:capFirst">
      <x:param name="s" select="'fooBaR'"/>
    </x:call>
    <x:expect label="FooBaR" select="'FooBaR'"/>
  </x:scenario>
  
  <x:scenario label="els:lowercase">
    <x:context mode="els:lowercase">
      <t>This Is <strong>bOLD</strong> And <em>ItaL</em></t>
    </x:context>
    <x:expect label="els:lowercase">
      <t>this is <strong>bold</strong> and <em>ital</em></t>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="els:uppercase">
    <x:context mode="els:uppercase">
      <t>This Is <strong>bOLD</strong> And <em>ItaL</em></t>
    </x:context>
    <x:expect label="els:uppercase">
      <t>THIS IS <strong>BOLD</strong> AND <em>ITAL</em></t>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="els:is-empty-or-whitespace">
    <x:call function="els:is-empty-or-whitespace"/>
    <x:scenario label="1 parameter / Default singleline match">
      <x:scenario label="Single whitespace">
        <x:call>
          <x:param name="s" select="' '"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Multiple whitespaces">
        <x:call>
          <x:param name="s" select="'   '"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Multiline whitespaces">
        <x:call>
          <x:param xml:space="preserve" name="s">      
          
          </x:param>
        </x:call>
        <x:expect label="false" select="false()"/>
      </x:scenario>
      <x:scenario label="Special whitespaces">
        <x:call>
          <x:param name="s" select="'&#x00A0;&#x2002;&#x2003;'"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Empty string">
        <x:call>
          <x:param name="s" select="''"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Empty sequence">
        <x:call>
          <x:param name="s" select="()"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Not an empty string">
        <x:call>
          <x:param name="s" select="'not empty'"/>
        </x:call>
        <x:expect label="false" select="false()"/>
      </x:scenario>
    </x:scenario>
    <x:scenario label="2 parameters / Explicit singleline match">
      <x:call>
        <x:param name="m" position="2" select="false()"/>
      </x:call>
      <x:scenario label="Single whitespace">
        <x:call>
          <x:param name="s" select="' '"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Multiple whitespaces">
        <x:call>
          <x:param name="s" select="'   '"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Multiline whitespaces">
        <x:call>
          <x:param xml:space="preserve" name="s">      
          
          </x:param>
        </x:call>
        <x:expect label="false" select="false()"/>
      </x:scenario>
      <x:scenario label="Special whitespaces">
        <x:call>
          <x:param name="s" select="'&#x00A0;&#x2002;&#x2003;'"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Empty string">
        <x:call>
          <x:param name="s" select="''"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Empty sequence">
        <x:call>
          <x:param name="s" select="()"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Not an empty string">
        <x:call>
          <x:param name="s" select="'not empty'"/>
        </x:call>
        <x:expect label="false" select="false()"/>
      </x:scenario>
    </x:scenario>
    <x:scenario label="2 parameters / Explicit multiline match">
      <x:call>
        <x:param name="m" position="2" select="true()"/>
      </x:call>
      <x:scenario label="Single whitespace">
        <x:call>
          <x:param name="s" select="' '"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Multiple whitespaces">
        <x:call>
          <x:param name="s" select="'   '"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Multiline whitespaces">
        <x:call>
          <x:param xml:space="preserve" name="s">      
          
          </x:param>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Special whitespaces">
        <x:call>
          <x:param name="s" select="'&#x00A0;&#x2002;&#x2003;'"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Empty string">
        <x:call>
          <x:param name="s" select="''"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Empty sequence">
        <x:call>
          <x:param name="s" select="()"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>
      <x:scenario label="Not an empty string">
        <x:call>
          <x:param name="s" select="'not empty'"/>
        </x:call>
        <x:expect label="false" select="false()"/>
      </x:scenario>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="els:hasNoTextChildExceptWhiteSpace">
    <x:call function="els:hasNoTextChildExceptWhiteSpace"/>
    <x:scenario label="text exists (up)>">
      <x:call>
        <x:param name="e">
          <p>text exists
            <child-p>text of &lt;child-p&gt;</child-p>
          </p>
        </x:param>        
      </x:call>
      <x:expect label="false" select="false()"/>
    </x:scenario>
    <x:scenario label="text exists (down)">
      <x:call>
        <x:param name="e">
          <p>
            <child-p>text of &lt;child-p&gt;</child-p>
            text exists
          </p>
        </x:param>        
      </x:call>
      <x:expect label="false" select="false()"/>
    </x:scenario>    
    <x:scenario label="only whitespaces (indent)">
      <x:call>
        <x:param name="e">
          <p>
            <child-p>text of &lt;child-p&gt;</child-p>
          </p>
        </x:param>        
      </x:call>
      <x:expect label="true" select="true()"/>
    </x:scenario>
    <x:scenario label="only whitespaces and no break whitespaces">
      <x:call>
        <x:param name="e">
          <p>&#10;
            <child-p>text of &lt;child-p&gt;</child-p>
            &#10;
          </p>
        </x:param>        
      </x:call>
      <x:expect label="true" select="true()"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="els:normalize-and-simplify-spaces">
    <x:call function="els:normalize-and-simplify-spaces"/>
    <x:scenario label="String with various whitespaces to normalize">
      <x:call>
        <x:param name="string" xml:space="preserve">   &#x00A0;   my string
        that     needs&#x00A0; &#x00A0; 
        
        whitespace
   &#x2009;     normalization&#x2009;&#x2009;</x:param>
      </x:call>
      <x:expect label="Return the input string with spaces normalized and simplified" select="'my string that needs whitespace normalization'"/>
    </x:scenario>
    <x:scenario label="String with no whitespace to normalize">
      <x:call>
        <x:param name="string">no-space-to-see-here</x:param>        
      </x:call>
      <x:expect label="Return the input string" select="'no-space-to-see-here'"/>
    </x:scenario>
    <x:scenario label="Empty sequence">
      <x:call>
        <x:param name="string" select="()"/>
      </x:call>
      <x:expect label="Return an empty string" select="''"/>
    </x:scenario>
  </x:scenario>
  
</x:description>