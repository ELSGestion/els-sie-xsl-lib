<?xml version="1.0" encoding="UTF-8"?>
<x:description 
  xmlns:x="http://www.jenitennison.com/xslt/xspec" 
  xmlns:els="http://www.lefebvre-sarrut.eu/ns/els"
  stylesheet="../../main/xsl/els-common.xsl">
  
  <x:scenario label="DATES">

    <x:scenario label="getCurrentIsoDate" pending="Not yet implemented">
      <x:call function="els:getCurrentIsoDate"> </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getYearFromIsoDate" pending="Not yet implemented">
      <x:call function="els:getYearFromIsoDate">
        <x:param name="isoDate" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getMonthFromIsoDate" pending="Not yet implemented">
      <x:call function="els:getMonthFromIsoDate">
        <x:param name="isoDate" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getDayFromIsoDate" pending="Not yet implemented">
      <x:call function="els:getDayFromIsoDate">
        <x:param name="isoDate" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="isIsoDate" pending="Not yet implemented">
      <x:call function="els:isIsoDate">
        <x:param name="dateString" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="verbalizeMonthFromNum" pending="Not yet implemented">
      <x:call function="els:verbalizeMonthFromNum">
        <x:param name="monthNumString" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getMonthNumFromVerbalizeMonth" pending="Not yet implemented">
      <x:call function="els:getMonthNumFromVerbalizeMonth">
        <x:param name="monthString" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="makeIsoDate">
      <x:call function="els:makeIsoDate">
        <x:param name="s" select="'21-10-1972'"/>
        <x:param name="sep" select="'-'"/>
      </x:call>
      <x:expect label="1972-10-21" select="'1972-10-21'"/>
    </x:scenario>
    
    <x:scenario label="makeIsoDateFromYYYYMMDD">
      <x:call function="els:makeIsoDateFromYYYYMMDD"/>
      <x:scenario label="/ Parameter is castable as YYYYMMDD">
        <x:call>
          <x:param name="date" select="'19721021'"/>
        </x:call>
        <x:expect label="1972-10-21" select="'1972-10-21'"/>        
      </x:scenario>     
      <x:scenario label="/ Parameter is castable as YYYYMMDD">
        <x:call>
          <x:param name="date" select="'19721001'"/>
        </x:call>
        <x:expect label="1972-10-01" select="'1972-10-01'"/>        
      </x:scenario>      
      <x:scenario label="/ Parameter is not castable as YYYYMMDD">
        <x:call>
          <x:param name="date" select="'null'"/>
        </x:call>
        <x:expect label="Returns an empty sequence" select="()"/>
      </x:scenario>
    </x:scenario>
    
    <x:scenario label="getIsoDateFromString">
      <x:call function="els:getIsoDateFromString"/>
      <x:scenario label="/ Parameter is castable as xs:dateTime">
        <x:call>
          <x:param name="date" select="'2016-03-07T00:00:00.0Z'"/>
        </x:call>
        <x:expect label="Returns a normalized ISO date" select="'2016-03-07'"/>
      </x:scenario>
      <x:scenario label="/ Parameter is castable as xs:date">
        <x:call>
          <x:param name="date" select="'2016-03-07'"/>
        </x:call>
        <x:expect label="Returns a normalized ISO date" select="'2016-03-07'"/>
      </x:scenario>
      <x:scenario label="/ Parameter is not a valid xs:date/xs:dateTime">
        <x:call>
          <x:param name="date" select="'null'"/>
        </x:call>
        <x:expect label="Returns an empty sequence" select="()"/>
      </x:scenario>
    </x:scenario>

    <x:scenario label="date-number-slash" pending="Not yet implemented">
      <x:call function="els:date-number-slash">
        <x:param name="param" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="date-number-dash" pending="Not yet implemented">
      <x:call function="els:date-number-dash">
        <x:param name="param" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="date-string" pending="Not yet implemented">
      <x:call function="els:date-string">
        <x:param name="param" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="displayDate" pending="Not yet implemented">
      <x:call function="els:displayDate">
        <x:param name="param" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="date-string-to-number-slash" pending="Not yet implemented">
      <x:call function="els:date-string-to-number-slash">
        <x:param name="dateVerbalized" select="''"/>
        <x:param name="shortMonth" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="date-string-to-number-slash" pending="Not yet implemented">
      <x:call function="els:date-string-to-number-slash">
        <x:param name="dateVerbalized" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

  </x:scenario>

  <x:scenario label="STRINGS">
   
    <x:scenario label="reccursivReplace" pending="Not yet implemented">
      <x:call function="els:reccursivReplace">
        <x:param name="Text" select="''"/>
        <x:param name="SequenceDeTriplets" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="normalize-no-diacritic" pending="Not yet implemented">
      <x:call function="els:normalize-no-diacritic">
        <x:param name="string" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="crlf" pending="Not yet implemented">
      <x:call function="els:crlf">
        <x:param name="n" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="crlf" pending="Not yet implemented">
      <x:call function="els:crlf"> </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getFirstChar" pending="Not yet implemented">
      <x:call function="els:getFirstChar">
        <x:param name="s" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getFirstChar" pending="Not yet implemented">
      <x:call function="els:getFirstChar">
        <x:param name="s" select="''"/>
        <x:param name="n" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="getStringButFirstChar" pending="Not yet implemented">
      <x:call function="els:getStringButFirstChar">
        <x:param name="s" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="capFirst_lowercase" pending="Not yet implemented">
      <x:call function="els:capFirst_lowercase">
        <x:param name="s" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="capFirst" pending="Not yet implemented">
      <x:call function="els:capFirst">
        <x:param name="s" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>
  </x:scenario>

  <x:scenario label="XML">

    <x:scenario label="get-xpath" pending="Not yet implemented">
      <x:call function="els:get-xpath">
        <x:param name="node" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="get-xpath" pending="Not yet implemented">
      <x:call function="els:get-xpath">
        <x:param name="node" select="''"/>
        <x:param name="nsprefix" select="''"/>
        <x:param name="display_position" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="PSEUDO ATTRIBUTES">

      <x:scenario label="els:pseudoAttributes2xml($str, $attQuot)" pending="A finir">
        <!--DEBUG : cf. cf. http://markmail.org/thread/ez25ul5izykrbguv-->
        <x:call function="els:pseudoAttributes2xml">
          <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
          <x:param name="attQuot">"</x:param>
        </x:call>
        <x:expect label="2 attributes catched" test="/*/@*">
          <result version="1.0" encoding="UTF-8"/>
        </x:expect>
      </x:scenario>

      <x:scenario label="els:pseudoAttribute2xml" pending="A finir">
        <x:call function="els:pseudoAttribute2xml">
          <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
          <x:param name="attName" select="'version'"/>
        </x:call>
        <x:expect label="1 attributes catched" test="/*/@*">
          <result version="1.0"/>
        </x:expect>
      </x:scenario>

      <x:scenario label="els:getPseudoAttributeValue">
        <x:call function="els:getPseudoAttributeValue">
          <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
          <x:param name="attName" select="'version'"/>
        </x:call>
        <x:expect label="1.0" select="'1.0'"/>
      </x:scenario>

      <x:scenario label="els:hasPseudoAttribute">
        <x:call function="els:hasPseudoAttribute">
          <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
          <x:param name="attName" select="'version'"/>
        </x:call>
        <x:expect label="true" select="true()"/>
      </x:scenario>

      <x:scenario label="els:hasPseudoAttribute">
        <x:call function="els:hasPseudoAttribute">
          <x:param name="str">xml version="1.0" encoding="UTF-8" toto = "tata" x " = not-pseudo=attribute_string</x:param>
          <x:param name="attName" select="'foo'"/>
        </x:call>
        <x:expect label="false" select="false()"/>
      </x:scenario>

    </x:scenario>

    <x:scenario label="hasAncestor" pending="Not yet implemented">
      <x:call function="els:hasAncestor">
        <x:param name="node" select="''"/>
        <x:param name="top" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="hasStyle" pending="Not yet implemented">
      <x:call function="els:hasStyle">
        <x:param name="e" select="''"/>
        <x:param name="style" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="hasClass" pending="Not yet implemented">
      <x:call function="els:hasClass">
        <x:param name="e" select="''"/>
        <x:param name="class" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="addClass" pending="Not yet implemented">
      <x:call function="els:addClass">
        <x:param name="e" select="''"/>
        <x:param name="class" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="removeOneClass">
      <x:call function="els:removeOneClass">
        <x:param name="e">
          <element class="try1 try2 try3"/>          
        </x:param>
      </x:call>
      <x:scenario label="try1">
        <x:call>
          <x:param name="classToRemove" as="xs:string" select="'try1'"/>
        </x:call>
        <x:expect label="OK" select="/*/@class">
          <temp class="try2 try3"/>
        </x:expect>        
      </x:scenario>
      <x:scenario label="try2">
        <x:call>
          <x:param name="classToRemove" as="xs:string" select="'try2'"/>
        </x:call>
        <x:expect label="OK" select="/*/@class">
          <temp class="try1 try3"/>
        </x:expect>        
      </x:scenario>
      <x:scenario label="try3">
        <x:call>
          <x:param name="classToRemove" as="xs:string" select="'try3'"/>
        </x:call>
        <x:expect label="OK" select="/*/@class">
          <temp class="try1 try2"/>
        </x:expect>        
      </x:scenario>      
    </x:scenario>

<!--    <x:scenario label="meta:get-word-index-lower-than-limit" focus="yes">
      <x:call function="meta:get-word-index-lower-than-limit">
        <x:param name="string" as="xs:string" select="'word1 word2 word3'"/>
      </x:call>
      <x:scenario label="$limit = 5">
        <x:call>
          <x:param name="limit" as="xs:integer" select="5"/>
        </x:call>
        <x:expect label="test" select="1"/>
      </x:scenario>
      <x:scenario label="$limit = 8">
        <x:call>
          <x:param name="limit" as="xs:integer" select="11"/>
        </x:call>
        <x:expect label="test" select="2"/>
      </x:scenario>
      <x:scenario label="$limit = 17">
        <x:call>
          <x:param name="limit" as="xs:integer" select="17"/>
        </x:call>
        <x:expect label="test" select="3"/>
      </x:scenario>
    </x:scenario>-->
    

    <x:scenario label="displayNode" pending="Not yet implemented">
      <x:call function="els:displayNode">
        <x:param name="node" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="evaluate-xpath" pending="A finir">
      <x:call function="els:evaluate-xpath">
        <x:param name="xpath" select="'//niveau'"/>
        <x:param name="e">
          <infoCommentaire>
            <titre>test</titre>
            <commentaire id="c1">
              <niveau id="n1">
                <titre>Titre 1</titre>
                <niveau id="n1.1">
                  <titre>Titre 1.1</titre>
                </niveau>
              </niveau>
            </commentaire>
          </infoCommentaire>
        </x:param>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="serialize" pending="Not yet implemented">
      <x:call function="els:serialize">
        <x:param name="nodes" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

  </x:scenario>

  <x:scenario label="FILES">
    
    <x:scenario label="getFileName (2 parameters)">
      <x:call function="els:getFileName"/>
      <x:scenario label="$withExt = true() (file name + extension)">
        <x:call>
          <x:param name="withExt" select="true()" position="2"/>
        </x:call>
        <x:scenario label="$filePath = 'file.ext'">
          <x:call>
            <x:param name="filePath" select="'file.ext'" position="1"/>
          </x:call>
          <x:expect label="File name + ext" select="'file.ext'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'folder1/folder2/folder3/file.ext'">
          <x:call>
            <x:param name="filePath" select="'folder1/folder2/folder3/file.ext'" position="1"/>
          </x:call>
          <x:expect label="File name + ext" select="'file.ext'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'folder1/../folder2/./folder3/file.ext'">
          <x:call>
            <x:param name="filePath" select="'folder1/../folder2/./folder3/file.ext'" position="1"/>
          </x:call>
          <x:expect label="File name + ext" select="'file.ext'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'file' (file name that has no extension)">
          <x:call>
            <x:param name="filePath" select="'file'" position="1"/>
          </x:call>
          <x:expect label="File name only (missing ext)" select="'file'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'folder1/folder2/folder3/file' (file name that has no extension)">
          <x:call>
            <x:param name="filePath" select="'folder1/folder2/folder3/file'" position="1"/>
          </x:call>
          <x:expect label="File name only (missing ext)" select="'file'"/>
        </x:scenario>
      </x:scenario>
      <x:scenario label="$withExt = false() (file name without extension)">
        <x:call>
          <x:param name="withExt" select="false()" position="2"/>
        </x:call>
        <x:scenario label="$filePath = 'file.ext'">
          <x:call>
            <x:param name="filePath" select="'file.ext'" position="1"/>
          </x:call>
          <x:expect label="File name only" select="'file'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'folder1/folder2/folder3/file.ext'">
          <x:call>
            <x:param name="filePath" select="'folder1/folder2/folder3/file.ext'" position="1"/>
          </x:call>
          <x:expect label="File name only" select="'file'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'folder1/../folder2/./folder3/file.ext'">
          <x:call>
            <x:param name="filePath" select="'folder1/../folder2/./folder3/file.ext'" position="1"/>
          </x:call>
          <x:expect label="File name only" select="'file'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'file' (file name that has no extension)">
          <x:call>
            <x:param name="filePath" select="'file'" position="1"/>
          </x:call>
          <x:expect label="File name only (missing ext)" select="'file'"/>
        </x:scenario>
        <x:scenario label="$filePath = 'folder1/folder2/folder3/file' (file name that has no extension)">
          <x:call>
            <x:param name="filePath" select="'folder1/folder2/folder3/file'" position="1"/>
          </x:call>
          <x:expect label="File name only (missing ext)" select="'file'"/>
        </x:scenario>
      </x:scenario>
    </x:scenario>
    
    <x:scenario label="getFileName (1 parameter) file name + extension (default behaviour)">
      <x:call function="els:getFileName"/>
      <x:scenario label="$filePath = 'file.ext'">
        <x:call>
          <x:param name="filePath" select="'file.ext'"/>
        </x:call>
        <x:expect label="File name + ext" select="'file.ext'"/>
      </x:scenario>
      <x:scenario label="$filePath = 'folder1/folder2/folder3/file.ext'">
        <x:call>
          <x:param name="filePath" select="'folder1/folder2/folder3/file.ext'"/>
        </x:call>
        <x:expect label="File name + ext" select="'file.ext'"/>
      </x:scenario>
      <x:scenario label="$filePath = 'folder1/../folder2/./folder3/file.ext'">
        <x:call>
          <x:param name="filePath" select="'folder1/../folder2/./folder3/file.ext'"/>
        </x:call>
        <x:expect label="File name + ext" select="'file.ext'"/>
      </x:scenario>
      <x:scenario label="$filePath = 'file' (file name that has no extension)">
        <x:call>
          <x:param name="filePath" select="'file'"/>
        </x:call>
        <x:expect label="File name only (missing ext)" select="'file'"/>
      </x:scenario>
      <x:scenario label="$filePath = 'folder1/folder2/folder3/file' (file name that has no extension)">
        <x:call>
          <x:param name="filePath" select="'folder1/folder2/folder3/file'"/>
        </x:call>
        <x:expect label="File name only (missing ext)" select="'file'"/>
      </x:scenario>
    </x:scenario>
    
    <x:scenario label="getFileExt" pending="Not yet implemented">
      <x:call function="els:getFileExt">
        <x:param name="filePath" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>
    
    <x:scenario label="getFolderPath()">
      
      <x:scenario label="getFolderPath($filePath)">
        <x:call function="els:getFolderPath">
          <x:param name="filePath" select="'file:/folder1/folder2/folder3/file.ext'"/>
        </x:call>
        <x:expect label="folderPath (level 1 = path complet)" select="'file:/folder1/folder2/folder3'"/>
      </x:scenario>
      
      <x:scenario label="getFolderPath($filePath, 2)">
        <x:call function="els:getFolderPath">
          <x:param name="filePath" select="'file:/folder1/folder2/folder3/file.ext'"/>
          <x:param name="level" select="2"/>
        </x:call>
        <x:expect label="folderPath 2" select="'file:/folder1/folder2'"/>
      </x:scenario>
      
    </x:scenario>
    
    <x:scenario label="getFolderName()">
      
      <x:scenario label="getFolderName($filePath)">
        <x:call function="els:getFolderName">
          <x:param name="filePath" select="'file:/folder1/folder2/folder3/file.ext'"/>
        </x:call>
        <x:expect label="folderPath (level 1 = parent folder name)" select="'folder3'"/>
      </x:scenario>
      
      <x:scenario label="getFolderName($filePath, 2)">
        <x:call function="els:getFolderName">
          <x:param name="filePath" select="'file:/folder1/folder2/folder3/file.ext'"/>
          <x:param name="level" select="2"/>
        </x:call>
        <x:expect label="folderPath 2" select="'folder2'"/>
      </x:scenario>
      
    </x:scenario>
    
    <x:scenario label="getRelativePath()">
      
      <x:scenario label="getRelativePath($source, $target)">
        <x:call function="els:getRelativePath">
          <x:param name="source" select="'file:/folder1/folder2/folder3'"/>
          <x:param name="target" select="'file:/folder1/folder2bis/folder3bis/file.ext'"/>
        </x:call>
        <x:expect label="getRelativePath($source, $target)" select="'../../folder2bis/folder3bis/file.ext'"/>
      </x:scenario>
      
    </x:scenario>
    
  </x:scenario>

  <x:scenario label="MATHS">
    <x:scenario label="roman2numeric" pending="Not yet implemented">
      <x:call function="els:roman2numeric">
        <x:param name="roman" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="litteral2numeric" pending="Not yet implemented">
      <x:call function="els:litteral2numeric">
        <x:param name="lit" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="isNumber" pending="Not yet implemented">
      <x:call function="els:isNumber">
        <x:param name="s" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="isInteger" pending="Not yet implemented">
      <x:call function="els:isInteger">
        <x:param name="s" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="round" pending="Not yet implemented">
      <x:call function="els:round">
        <x:param name="number" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="round" pending="Not yet implemented">
      <x:call function="els:round">
        <x:param name="number" select="''"/>
        <x:param name="precision" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="hexToDec" pending="Not yet implemented">
      <x:call function="els:hexToDec">
        <x:param name="str" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

    <x:scenario label="decToHex" pending="Not yet implemented">
      <x:call function="els:decToHex">
        <x:param name="in" select="''"/>
      </x:call>
      <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
    </x:scenario>

  </x:scenario>

</x:description>