@Library('jenkins-sharedlibs-linux')
@Library('pipeline-utility-steps')_
//@Library('jenkins-sharedlibs-linux@mvnrelease_cred_error')

pipeline{
    agent { label "linux" }
    parameters{
        booleanParam(defaultValue: false, description: "Release", name: "IS_RELEASE")
        string(description: 'Version suivante (termine par -SNAPSHOT)', defaultValue: '', name: 'NEXT_VERSION')
    }

    tools{
        maven "maven-latest"
        jdk "jdk-21"
    }
    stages {
        stage('Test') {
            steps {
                mvnBuild(GOAL: "test")
            }
        }
        stage('build') {
            steps {
                mvnBuild(GOAL: "install", OPTIONS: "-DskipTests")
            }
        }
        stage('sonar') {
            steps {
                withSonarQubeEnv('sonar') {
                    mvnBuild(GOAL: "sonar:sonar", OPTIONS: "-DskipTests")
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage('deploy') {
            when {
                not {
                    allOf {
                        triggeredBy cause: "UserIdCause";
                        expression { return params.IS_RELEASE }
                    }
                }
            }
            steps {
                mvnBuild(GOAL: "deploy", OPTIONS: "-DskipTests")
            }
        }
        stage('Clone') {
            when {
                allOf {
                    triggeredBy cause: "UserIdCause";
                    expression { return params.IS_RELEASE }
                }
            }
            steps {
                git(
                    url: "https://github.com/ELSGestion/els-sie-xsl-lib.git",
                    credentialsId: 'GitHub_IC_LSS',
                    branch: env.BRANCH_NAME
                )
            }
        }
        stage('release') {
            when {
                allOf {
                    triggeredBy cause: "UserIdCause";
                    expression { return params.IS_RELEASE }
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "GitHub_IC_LSS", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        def pom = readMavenPom file: 'pom.xml'
                        def version = pom.version
                        def versionWithoutSnapshot = version.replaceAll(/-SNAPSHOT$/, "")
                        echo "Version " + versionWithoutSnapshot
                        sh "git config user.name ${USERNAME}"
                        sh "git config user.password ${PASSWORD}"
                        echo "Version " + version
                        mvnRelease(REL_VERSION: versionWithoutSnapshot, DEV_VERSION: params.NEXT_VERSION, MVN_PROFILES: "release", OPTIONS: '-DskipTests')
                    }
                }
            }
        }
    }
}
